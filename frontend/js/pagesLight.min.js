/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */


"use strict";

(function(exports){
    
    var root = ".enter-tab ";
    var url = window.location.href.substring(0, window.location.href.lastIndexOf('/')+1);
    
    exports.init = function () {
        $(document.forms['login-form']).on('submit', submit);
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {

    };
            
    var submit = function() {
        var form = $(this);

        $('.error', form).html('');
//        $(":submit", form).button("loading");

        var request = $.ajax({
            url : url + "login",
            method : "POST",
            data : form.serialize(),
            complete : function() {
                $(":submit", form).button("reset");
            },
//             statusCode : {
//                 200 : function() {
//                 },
//                 403 : function(jqXHR) {
//                     var error = JSON.parse(jqXHR.responseText);
//                     $('.error', form).html(error.message);
//                 }
//             }
        });
        request.done(function(data) {
//             //window.location.href = "/chat";
//             window.location.href = "/nims.html";
            window.location.href = url + "page.html";
        });
        
        request.fail(function(errorInfo, textStatus, errorThrown) {
            var msg;
            try {
                msg = Utils.handleErrorMsg(JSON.parse(errorInfo.responseText));
            } catch(err){
                msg = Utils.handleErrorMsg(errorInfo.responseText || textStatus || 'error');
            }
//             var error = JSON.parse(jqXHR.responseText);
//             $('.error', form).html(error.message); 
//            $('.error', form).html(textStatus); 
            $('.error', form).html(msg); 
        });
        
        return false;
    };
    
})(this['Enter']={});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

var ShopManagement = {};

var ShopManagementTmpl = (function(exports, enableShopSelect, shopShopWindow){
    
    var root = '.shop-management-tab ';
    var categoryRoot = root + '.category-management ';
    var localAssetRoot = root + '.local-asset-management ';
    var categoryContentRoot = root + '.category-content-management ';
    var state = {};

    exports.init = function() {
        state.views = {};
        var nav = root + ".sub-tab-navigation";
        var content = root + ".sub-tab-content";
        var containers = {
            root: state,
            navigation: queryEl(nav),
            content: queryEl(content)
        };
        Utils.addView(containers, "category-content-management", CategoryContentManagement, {mainPage:true});
        Utils.addView(containers, "local-asset-profile", LocalAssetProfile);
        Utils.addView(containers, "global-asset-profile", GlobalAssetProfile);
        if(shopShopWindow){
            Utils.addView(containers, "shop-window", ShopWindow);
        }
        
        listen(queryEl(categoryRoot + ".create-entity-button"),"click", createCategory);
        listen(queryEl(categoryRoot + ".rename-entity-button"),"click", renameCategory);
        listen(queryEl(categoryRoot + ".remove-entity-button"),"click", removeCategory);
        
        listen(queryEl(localAssetRoot + ".create-entity-button"),"click", createLocalAsset);
        listen(queryEl(localAssetRoot + ".rename-entity-button"),"click", renameLocalAsset);
        listen(queryEl(localAssetRoot + ".remove-entity-button"),"click", removeLocalAsset);
        
        ShopManagement.getCurrentShopName = () => state.shopName;
        
        if(enableShopSelect){
            $(root + ".shop-select").select2().on("change", buildContentDelegate);
        }
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {
        if(enableShopSelect){
            clearEl(queryEl(root + ".shop-select"));
            
            PermissionInformer.getEntityNamesArray('shop', true, function(err, entityNames){
                if(err) {Utils.handleError(err); return;}
                
                var data = getSelect2Data(entityNames);
                if(entityNames.length > 0){
                    if(state.shopName != undefined && R.contains(state.shopName, entityNames.map(R.prop('value')))){
                        $(root + ".shop-select").select2(data).val(state.shopName).trigger('change');
                    } else {
                        $(root + ".shop-select").select2(data).val(entityNames[0].value).trigger('change');
                    }
                } else {
                    $(root + ".shop-select").select2(data);
                }
            });
        } else {
            DBMS.getShopName(function(err, shopName){
                if(err) {Utils.handleError(err); return;}
                state.shopName = shopName;
                buildContent(shopName);
            });
        }
    };
    
    var buildContentDelegate = (event) => buildContent(event.target.value);
    
    exports.getCurrentShopName = () => state.shopName;
    
    var buildContent = (shopName) => {
        state.shopName = shopName;
        DBMS.getShop(shopName, function(err, shopData){
            if(err) {Utils.handleError(err); return;}
            
            var data = arr2Select2(R.keys(shopData.categories).sort(CommonUtils.charOrdA));
            clearEl(queryEl(categoryRoot + ".rename-entity-select"));
            $(categoryRoot + ".rename-entity-select").select2(data);
            clearEl(queryEl(categoryRoot + ".remove-entity-select"));
            $(categoryRoot + ".remove-entity-select").select2(data);
            
            data = arr2Select2(R.keys(shopData.localAssets).sort(CommonUtils.charOrdA));
            clearEl(queryEl(localAssetRoot + ".rename-entity-select"));
            $(localAssetRoot + ".rename-entity-select").select2(data);
            clearEl(queryEl(localAssetRoot + ".remove-entity-select"));
            $(localAssetRoot + ".remove-entity-select").select2(data);
            
            state.currentView.refresh();
//            DBMS.getShopIndex(shopName, function(err, index){
//                if(err) {Utils.handleError(err); return;}
//                addEl(clearEl(queryEl(root + ".third-panel")), setAttr(addEl(makeEl('h2'), makeText(index)), 'style', 'text-align: center;'));
//            });
        });
        
    };
    
    var createCategory = function () {
        var input = queryEl(categoryRoot + ".create-entity-input");
        DBMS.createCategory(state.shopName, input.value.trim(), Utils.processError(function(){
            input.value = '';
            exports.refresh();
        }));
    };
    
    var renameCategory = function () {
        var toInput = queryEl(categoryRoot + ".rename-entity-input");
        var fromName = queryEl(categoryRoot + ".rename-entity-select").value.trim();
        var toName = toInput.value.trim();
        DBMS.renameCategory(state.shopName, fromName, toName, function(err){
            if(err) {Utils.handleError(err); return;}
            toInput.value = '';
            exports.refresh();
        });
    };
    
    var removeCategory = function () {
        var name = queryEl(categoryRoot + ".remove-entity-select").value.trim();
        Utils.confirm(strFormat(getL10n('shop-confirm-category-remove'), [name]), () => {
            DBMS.removeCategory(state.shopName, name, Utils.processError(exports.refresh));
        });
    };
    
    var createLocalAsset = function () {
        var input = queryEl(localAssetRoot + ".create-entity-input");
        DBMS.createLocalAsset(state.shopName, input.value.trim(), Utils.processError(function(){
            input.value = '';
            exports.refresh();
        }));
    };
    
    var renameLocalAsset = function () {
        var toInput = queryEl(localAssetRoot + ".rename-entity-input");
        var fromName = queryEl(localAssetRoot + ".rename-entity-select").value.trim();
        var toName = toInput.value.trim();
        DBMS.renameLocalAsset(state.shopName, fromName, toName, function(err){
            if(err) {Utils.handleError(err); return;}
            toInput.value = '';
            exports.refresh();
        });
    };
    
    var removeLocalAsset = function () {
        var name = queryEl(localAssetRoot + ".remove-entity-select").value.trim();
        Utils.confirm(strFormat(getL10n('shop-confirm-local-asset-remove'), [name]), () => {
            DBMS.removeLocalAsset(state.shopName, name, Utils.processError(exports.refresh));
        });
    };

});

ShopManagementTmpl(this['MasterShopManagement']={}, true, true);

ShopManagementTmpl(this['PlayerShopManagement']={}, false, false);

//(this['ShopManagement']={});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    var root = '.shop-window-tab ';
    var state = {};
    var l10n = L10n.get('shop');

    exports.init = function() {
//        listen(queryEl(root + '.refreshButton'), 'click', exports.refresh);
//        queryEls(root + '.discount-button').map(listen(R.__, 'click', (event)=>{
////            state.discount = Number(getAttr(event.target, 'value'));
//            updateFinalCost();
//        }));
        checkForQR();
        listen(queryEl(root + ".amount-input"), 'change', onAmountChange);
        listen(queryEl(root + ".buy-button"), 'click', onBuy);
        listen(queryEl(root + ".start-qr-read"), 'click', readQR);
        
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {
        var shopName = ShopManagement.getCurrentShopName();
        DBMS.getShop(shopName, function(err, shopData){
            if(err) {Utils.handleError(err); return;}
            state.shopData = shopData;
            var categoryList  = R.keys(state.shopData.categories).sort(CommonUtils.charOrdA);
            
            var catSelect = clearEl(queryEl(root + ".category-select"));
            clearEl(queryEl(root + ".asset-select"));
            
            
            var catBtns = categoryList.map( name => {
                var btn = addEl(makeEl('button'), makeText(name));
                addClass(btn, 'select-button');
                btn.catName = name;
                listen(btn, "click", onCategorySelect);
                return btn;
            });
            addEls(catSelect, catBtns);
            if(catBtns.length > 0) onCategorySelect({target:catBtns[0]});
        });
    };

    var makeBtn = R.curry((catName, el) => {
        var btn = addEl(makeEl('button'), makeText(el.dispName));
        addClass(btn, 'select-button');
        btn.name = el.name;
        btn.catName = catName;
        btn.assetType = el.type;
        listen(btn, "click", onAssetSelect);
        return btn;
    });
    
    var onCategorySelect = (event) => {
        queryEls(root + ".category-select > button").map(removeClass(R.__, 'active'));
        addClass(event.target, 'active');
        var catName = event.target.catName;
        var category = state.shopData.categories[catName];
        
        clearEl(queryEl(root + ".asset-info"));
        addClass(queryEl(root + ".buy-controls"), 'hidden');
        var assetSelect = clearEl(queryEl(root + ".asset-select"));
        
        var arr = R.keys(category.globals).map(R.pair(R.__, 'global'));
        arr = R.concat(arr, R.keys(category.locals).map(R.pair(R.__, 'local')));

        DBMS.getGlobalAssetDisplayNames( (err, globalDisplayNames) => {
            if(err) {Utils.handleError(err); return;}
            
            arr = arr.map(el => {
                if(el[1] === 'global'){
                    var dispName = globalDisplayNames[el[0]].displayString;
                } else {
                    var dispName = state.shopData.localAssets[el[0]].displayString;
                }
                return {
                    name: el[0],
                    type: el[1],
                    dispName: dispName.trim() === '' ? el[0] : dispName
                }
            }).sort(CommonUtils.charOrdAFactory(R.prop('dispName')));
            
            addEls(assetSelect, arr.map(makeBtn(catName)))
        });
    };
    
    var onAssetSelect = (event) => {
        queryEls(root + ".asset-select > button").map(removeClass(R.__, 'active'));
        addClass(event.target, 'active');
        removeClass(queryEl(root + ".buy-controls"), 'hidden');
        queryEl('.customer-login').value = '';
        queryEl('.customer-password').value = '';
        state.curAsset = {
            name : event.target.name ,
            catName : event.target.catName ,
            assetType : event.target.assetType 
        };
        showAssetInfo();
    };
    
    var showAssetInfo = () => {
        var set = state.curAsset.assetType === 'local' ? 'locals' : 'globals';
        var cost = state.shopData.categories[state.curAsset.catName][set][state.curAsset.name].cost;
        state.cost = cost;
        queryEl(root + ".final-cost-input").value = cost;
//        state.discount = 0;
        if(state.curAsset.assetType === 'local'){
            state.assetData = state.shopData.localAssets[state.curAsset.name];
            renderAssetInfo();
        } else {
            DBMS.getAsset(state.curAsset.name, (err, assetData) => {
                if(err) {Utils.handleError(err); return;}
                state.assetData = assetData;
                renderAssetInfo();
            });
        }
    };
    
    var renderAssetInfo = () => {
        var info = clearEl(queryEl(root + ".asset-info"));
        var displayName = state.assetData.displayString.trim() !== '' ? state.assetData.displayString : state.curAsset.name;
        addEl(info, addEl(makeEl('h2'), makeText(displayName)));
        addEl(info, addEl(makeEl('span'), makeText(state.assetData.description)));
        addEl(clearEl(queryEl(root + ".initial-cost-value")), makeText(state.cost));

        setClassByCondition(queryEl(root + ".activation-codes-container"), 'hidden', !state.assetData.isPhysical);
        setClassByCondition(queryEl(root + ".qr-reader"), 'hidden', !(state.assetData.isPhysical && state.isCanvasOk));
        var amount = clearEl(queryEl(root + ".amount-input"));
        amount.value = 1;
        if(state.assetData.isPhysical){
            delAttr(amount, 'disabled');
        } else {
            setAttr(amount, 'disabled', 'disabled');
        }
        onAmountChange({target: amount});
    };
    
    var onAmountChange = (event) => {
        var num = Number(event.target.value);
        var el = clearEl(queryEl(root + ".activation-codes"));
        if(num < 1) num = 1;
        if(num > 10) num = 10;
        addEls(el, R.repeat(1, num).map(val => {
//            return setAttr(makeEl('input'), 'type', 'number');
            return addClasses(makeEl('input'), ['form-control','qr-code-input']);
        }));
    };
    
    var onBuy = () => {
        var shopName = ShopManagement.getCurrentShopName();
        var cost = Number(queryEl(root + ".final-cost-input").value);
        var customerLogin = queryEl('.customer-login').value;
        var customerPassword = queryEl('.customer-password').value;
        var opts = {
            amount: Number(queryEl(root + ".amount-input").value)
        };
        if(state.assetData.isPhysical){
            var values = queryEls(root + ".activation-codes input").map(R.compose(R.trim, R.prop('value')));
            if(values.some(R.isEmpty)){
                Utils.alert(l10n('not-all-activation-codes-are-full'));
                return;
            }
            opts.codes = values;
        }
        DBMS.buyAsset(shopName, state.curAsset.name, state.curAsset.assetType, cost, customerLogin, customerPassword, opts, function(err){
            if(err) {Utils.handleError(err); return;}
            queryEl('.customer-login').value = '';
            queryEl('.customer-password').value = '';
            Utils.alert(l10n('on-purchase-success'));
        });
    };
    
    var checkForQR = () => {
        function isCanvasSupported(){
          var elem = document.createElement('canvas');
          return !!(elem.getContext && elem.getContext('2d'));
        }
        state.isCanvasOk = isCanvasSupported() && window.File && window.FileReader;
    };
    
    var readQR = () => {
        qrcode.callback = read;
        qrcode.customCanvas = queryEl(root + ".qr-canvas");
        var video = setAttr(makeEl('video'), 'autoplay','autoplay');
        addEl(clearEl(queryEl(root + ".video")), video);
        qrcode.setWebcam(video);
    };
    
    var read = (a) => {
        console.log('read called');
        console.log(a);
        queryEl(root + ".video video").pause();
        clearEl(queryEl(root + ".video"));
        
        var request = $.ajax({
//            url : 'http://dev.alice.digital:8159/decode?content=' + a,
            url : 'https://alice.digital/app/qr/decode?content=' + a,
            dataType : "text",
            method : "GET",
            contentType : "application/json;charset=utf-8",
            cache: false,
            timeout: Constants.httpTimeout,
        });
        
        request.done(function(data) {
            data = JSON.parse(data);
            var length = data.payload.length;
            var payload = data.payload.substring(length-6, length);
            var values = queryEls(root + ".activation-codes input").map(R.compose(R.trim, R.prop('value')));
            if(R.contains(payload, values)){
                Utils.alert(l10n('this-qr-code-already-used-in-inputs'));
                return;
            }
            var inputs = queryEls(root + ".activation-codes input").filter(R.compose(R.isEmpty, R.trim, R.prop('value')));
            if(inputs.length > 0){
                inputs[0].value = data.payload.substring(length-6, length);
            } else {
                Utils.alert(l10n('all-activation-codes-are-full'));
            }
        });
        
        request.fail(function(errorInfo, textStatus, errorThrown) {
            Utils.alert(errorInfo.responseText || textStatus || 'error');
        });
    };
    

})(this['ShopWindow']={});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    var root = '.shop-about-tab ';
    var state = {};
    var l10n = L10n.get('shop');

    exports.init = function() {
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {
        var shopName = ShopManagement.getCurrentShopName();
        DBMS.getShop(shopName, function(err, shopData){
            if(err) {Utils.handleError(err); return;}
            var body = clearEl(queryEl(root + '.shop-info-table-body'));
            var el1 = addEls(makeEl('tr'), [ addEl(makeEl('td'), addEl(makeEl('span'), makeText(l10n('corporation-name')))),
                                             addEl(makeEl('td'), addEl(makeEl('span'), makeText(shopData.corporation)))])
            var el2 = addEls(makeEl('tr'), [ addEl(makeEl('td'), addEl(makeEl('span'), makeText(l10n('legal-body')))),
                                             addEl(makeEl('td'), addEl(makeEl('span'), makeText(shopData.sellerLogin)))])
            addEls(body, [el1, el2]);
        });
    };

})(this['ShopAbout']={});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    var root = '.category-content-management-tab ';
    var categoryContentRoot = root + '.category-content-management ';
    var state = {};
    state.sortKey = 0;
    state.sortDir = "asc";

    var headArr = [ 'categoryName',
        'assetName',
        'displayString',
        'cost',
        'type',
        'resourceCost',
        'isPhysical',
        'description' ];

    exports.init = function() {
        listen(queryEl(categoryContentRoot + ".add-entity-button-1"),"click", addGlobalAssetToCategory);
        listen(queryEl(categoryContentRoot + ".add-entity-button-2"),"click", addLocalAssetToCategory);
        listen(queryEl(categoryContentRoot + ".remove-entity-button-1"),"click", removeGlobalAssetFromCategory);
        listen(queryEl(categoryContentRoot + ".remove-entity-button-2"),"click", removeLocalAssetFromCategory);
        
        initSortIcons();
        queryEls(categoryContentRoot + "thead tr input").map(listen(R.__, 'input', exports.refresh));
        
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {
        var shopName = ShopManagement.getCurrentShopName();
        DBMS.getShop(shopName, function(err, shopData){
            if(err) {Utils.handleError(err); return;}
            
            var data = arr2Select2(R.keys(shopData.categories).sort(CommonUtils.charOrdA));
            
            clearEl(queryEl(categoryContentRoot + ".add-entity-select-12"));
            $(categoryContentRoot + ".add-entity-select-12").select2(data);
            
            clearEl(queryEl(categoryContentRoot + ".add-entity-select-22"));
            $(categoryContentRoot + ".add-entity-select-22").select2(data);

            var globalAssets = arr2Select2(R.keys(shopData.assets));
//            globalAssets.placeholder = "Select an option";
            clearEl(queryEl(categoryContentRoot + ".add-entity-select-11"));
            $(categoryContentRoot + ".add-entity-select-11").select2((globalAssets));
            
            var localAssets = arr2Select2(R.keys(shopData.localAssets));
            clearEl(queryEl(categoryContentRoot + ".add-entity-select-21"));
            $(categoryContentRoot + ".add-entity-select-21").select2((localAssets));
            
            var getList = (container) => {
                return R.unnest(R.keys(shopData.categories).map(categoryName => {
                    return R.keys(shopData.categories[categoryName][container]).map(assetName => [categoryName, assetName])
                }));
            }
            var assets = getList('globals').map( arr => R.zipObj(['displayName','value'], [arr[0] + '/' + arr[1], JSON.stringify(arr)]));
            assets.sort(CommonUtils.charOrdAFactory(R.prop('displayName')))
            clearEl(queryEl(categoryContentRoot + ".remove-entity-select-1"));
            $(categoryContentRoot + ".remove-entity-select-1").select2(getSelect2Data(assets));
            
            var assets = getList('locals').map( arr => R.zipObj(['displayName','value'], [arr[0] + '/' + arr[1], JSON.stringify(arr)]));
            assets.sort(CommonUtils.charOrdAFactory(R.prop('displayName')))
            clearEl(queryEl(categoryContentRoot + ".remove-entity-select-2"));
            $(categoryContentRoot + ".remove-entity-select-2").select2(getSelect2Data(assets));
            
            fillShopTable(shopData);
        });
    };
    
    var initSortIcons = () => {
        var icons = queryEls(categoryContentRoot + "thead tr.first-row th");
        icons.map((icon, i) => {
            icon.index = i;
            listen(icon, "click", onSortChange);
        });
    };
    
    var onSortChange = function (event) {
        var target = event.target;
        if(target.tagName.toLowerCase() === "span"){
            target = target.parentElement;
        }
        
        if (state.sortKey === target.index) {
            state.sortDir = state.sortDir === "asc" ? "desc" : "asc";
            setClassByCondition(target, 'sortDesc', state.sortDir === 'desc');
            setClassByCondition(target, 'sortAsc', state.sortDir === 'asc');
        } else {
            var filterHead = queryEl(categoryContentRoot + "thead");
            nl2array(filterHead.getElementsByClassName("sortAsc")).forEach(removeClass(R.__, "sortAsc"));
            nl2array(filterHead.getElementsByClassName("sortDesc")).forEach(removeClass(R.__, "sortDesc"));
            
            state.sortKey = target.index;
            state.sortDir = "asc";
            addClass(target, "sortAsc");
        }
        exports.refresh();
    };
    
    var data2str = (data) => {
        if(data.cost !== -1){
            var input = addClass(makeEl('input'),'form-control');
            setAttr(input, 'type', 'number');
            setAttr(input, 'min', '0');
            input.value = data.cost;
            listen(input, "change", (event) => {
                DBMS.setAssetCost(ShopManagement.getCurrentShopName(), data.type, data.categoryName, data.assetName, Number(event.target.value), Utils.processError());
            });
        } else {
            input = makeText('');
        }
        return addEls(makeEl('tr'), [addEl(makeEl('td'), makeText(data.categoryName)),
                addEl(makeEl('td'), makeText(data.assetName)),
                addEl(makeEl('td'), makeText(data.displayString)),
                addEl(makeEl('td'), input),
//                addEl(makeEl('td'), makeText(data.cost)),
                addEl(makeEl('td'), makeText(data.type)),
                addEl(makeEl('td'), makeText(data.resourceCost)),
                addEl(makeEl('td'), makeText(data.isPhysical ? L10n.get('constant', 'yes') : '')),
                addEl(makeEl('td'), makeText(data.description))]);
    };
    
    var fillShopTable = (shopData) => {
        var table = clearEl(queryEl(categoryContentRoot + "tbody.table-content"));
        var data = R.unnest(R.keys(shopData.categories).map(categoryName => {
            var globals = shopData.categories[categoryName].globals;
            var data = R.keys(globals).map(global => {
                return {
                    categoryName: categoryName,
                    assetName: global,
                    displayString: shopData.globalAssets[global].displayString,
                    cost: globals[global].cost,
                    type: 'global',
                    resourceCost: shopData.globalAssets[global].resourceCost,
                    isPhysical: shopData.globalAssets[global].isPhysical,
                    description: shopData.globalAssets[global].description,
                }
            });
            
            var locals = shopData.categories[categoryName].locals;
            data = data.concat(R.keys(locals).map(local => {
                return {
                    categoryName: categoryName,
                    assetName: local,
                    displayString: shopData.localAssets[local].displayString,
                    cost: locals[local].cost,
                    type: 'local',
                    resourceCost: 0,
                    isPhysical: false,
                    description: shopData.localAssets[local].description,
                }
            }));
            
            return data;
        }));
        var usedGlobals = R.uniq(R.flatten(R.keys(shopData.categories).map(categoryName => R.keys(shopData.categories[categoryName].globals))));
        var usedLocals = R.uniq(R.flatten(R.keys(shopData.categories).map(categoryName => R.keys(shopData.categories[categoryName].locals))));
        var allGlobals = R.keys(shopData.assets);
        var allLocals = R.keys(shopData.localAssets);
        
        data = R.concat(data, R.difference(allGlobals, usedGlobals).map(global => {
            return {
                categoryName: L10n.get('shop','not-in-category'),
                assetName: global,
                displayString: shopData.globalAssets[global].displayString,
                cost: -1,
                type: 'global',
                resourceCost: shopData.globalAssets[global].resourceCost,
                isPhysical: shopData.globalAssets[global].isPhysical,
                description: shopData.globalAssets[global].description,
            }
        }));
        data = R.concat(data, R.difference(allLocals, usedLocals).map(local => {
            return {
                categoryName: L10n.get('shop','not-in-category'),
                assetName: local,
                displayString: shopData.localAssets[local].displayString,
                cost: -1,
                type: 'local',
                resourceCost: 0,
                isPhysical: false,
                description: shopData.localAssets[local].description,
            }
        }));

        var sortFunc = CommonUtils.charOrdAFactoryBase(state.sortDir, function(a){
            var value = a[headArr[state.sortKey]]; 
            if(R.is(String, value)){
                value = value.toLowerCase();
            }
            return value;
        });
        addEls(table, data.filter(makeFilterFunc()).sort(sortFunc).map(data2str));
    };
    
    var makeFilterFunc = () => {
        var values = queryEls(categoryContentRoot + "thead tr input").map(R.prop('value'));
        return function(data){
            return headArr.every((el, index) => {
                if(values[index].trim() === ''){
                    return true;
                }
                return String(data[headArr[index]]).toLowerCase().indexOf(String(values[index]).toLowerCase()) != -1;
            })
        };
    };
    
    var addGlobalAssetToCategory = ()=>{
        var asset = queryEl(categoryContentRoot + ".add-entity-select-11").value.trim();
        var category = queryEl(categoryContentRoot + ".add-entity-select-12").value.trim();
        DBMS.addGlobalAssetToCategory(ShopManagement.getCurrentShopName(), category, asset, Utils.processError(exports.refresh));
    };
    var addLocalAssetToCategory = ()=>{
        var asset = queryEl(categoryContentRoot + ".add-entity-select-21").value.trim();
        var category = queryEl(categoryContentRoot + ".add-entity-select-22").value.trim();
        DBMS.addLocalAssetToCategory(ShopManagement.getCurrentShopName(), category, asset, Utils.processError(exports.refresh));
    };
    var removeGlobalAssetFromCategory = ()=>{
        var arr = JSON.parse(queryEl(categoryContentRoot + ".remove-entity-select-1").value.trim());
        DBMS.removeGlobalAssetFromCategory(ShopManagement.getCurrentShopName(), arr[0], arr[1], Utils.processError(exports.refresh));
    };
    var removeLocalAssetFromCategory = ()=>{
        var arr = JSON.parse(queryEl(categoryContentRoot + ".remove-entity-select-2").value.trim());
        DBMS.removeLocalAssetFromCategory(ShopManagement.getCurrentShopName(), arr[0], arr[1], Utils.processError(exports.refresh));
    };

})(this['CategoryContentManagement']={});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

var AssetProfileTmpl = (function(exports, root, assetProfileStructure, isEditable, getAssetNames, updateAssetField, getAsset){
    
    var state = {};
    var l10n = L10n.get('asset');

    exports.init = function() {
        listen(queryEl(root +".entity-selector"), "change", showProfileInfoDelegate);
        
        var tbody = clearEl(queryEl(root + ".entity-profile"));
        
        state.inputItems = {};
        
        Constants[assetProfileStructure].forEach(function (profileSettings) {
            profileSettings.displayName = l10n(profileSettings.name);
            addEl(tbody, makeInput(profileSettings));
        });
        
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {
        getAssetNames(function(err, names){
            if(err) {Utils.handleError(err); return;}
            var sel = clearEl(queryEl(root + ".entity-selector"));
            fillSelector(sel, names.map(remapProps4Select));
        });
    };
    
    var makeInput = function (profileItemConfig) {
        var span = setAttr(makeEl('span'), "l10n-id", "asset-" + profileItemConfig.name);
        var tr = addEl(makeEl("tr"), addEl(makeEl('td'), addEl(span, makeText(profileItemConfig.displayName))))
        var input;
        switch (profileItemConfig.type) {
        case "text":
            input = makeEl("textarea");
            addClass(input, "profileTextInput");
            addClass(input,'form-control');
            break;
        case "string":
            input = makeEl("input");
            addClass(input, "profileStringInput");
            addClass(input,'form-control');
            break;
        case "number":
            input = makeEl("input");
            input.type = "number";
            addClass(input,'form-control');
            break;
        case "checkbox":
            input = makeEl("input");
            input.type = "checkbox";
            break;
        default:
            throw new Error('Unexpected type ' + profileItemConfig.type);
        }
        input.selfName = profileItemConfig.name;
        
        if(!isEditable){
            setAttr(input, 'disabled', 'true');
        }
//        addClass(input,"isGroupEditable");
        state.inputItems[profileItemConfig.name] = input;
        
        listen(input, "change", updateFieldValue(profileItemConfig.type));
    
        return addEl(tr, addEl(makeEl('td'), input));
    };
    
    var updateFieldValue = function(type){
        return function(event){
            var fieldName = event.target.selfName;
            var assetName = state.name;
            
            var value;
            switch(type){
            case "text":
            case "string":
                value = event.target.value;
                break;
            case "number":
                if (isNaN(event.target.value)) {
                    Utils.alert(getL10n("profiles-not-a-number"));
                    event.target.value = event.target.oldValue;
                    return;
                }
                value = Number(event.target.value);
                break;
            case "checkbox":
                value = event.target.checked;
                break;
            default:
                throw new Error('Unexpected type ' + type);
            }
            updateAssetField(assetName, fieldName, value, Utils.processError());
        }
    };
    
    var showProfileInfoDelegate = function (event) {
        var name = event.target.value.trim();
        getAsset(name, showProfileInfoCallback);
    };
    
    var showProfileInfoCallback = function (err, asset) {
        if(err) {Utils.handleError(err); return;}
        var name = asset.name;
        state.name = name;
        var inputItems = state.inputItems;
        Object.keys(inputItems).forEach(function (inputName) {
            if (inputItems[inputName].type === "checkbox") {
                inputItems[inputName].checked = asset[inputName];
            } else {
                inputItems[inputName].value = asset[inputName];
            }
            inputItems[inputName].oldValue = asset[inputName];
        });
    };
    
});

AssetProfileTmpl(this['AssetProfile']={}, '.asset-profile-tab ', 'assetProfileStructure', true, (callback) => {
    PermissionInformer.getEntityNamesArray('asset', false, callback);
}, (assetName, fieldName, value, callback) => {
    DBMS.updateAssetField(assetName, fieldName, value, callback);
}, (name, callback) => {
    DBMS.getAsset(name, callback);
});

AssetProfileTmpl(this['GlobalAssetProfile']={}, '.global-asset-profile-tab ', 'assetProfileStructure', false, (callback) => {
    var shopName = ShopManagement.getCurrentShopName();
    DBMS.getShop(shopName, function(err, shopData){
        if(err) {callback(err); return;}
        var assets = R.keys(shopData.assets).sort(CommonUtils.charOrdA).map(name => {
            return {
                displayName: name,
                value: name
            }
        });
        callback(null,assets);
    });
}, (assetName, fieldName, value, callback) => {
    Utils.alert(getL10n('errors-unsupported-operation'));
}, (name, callback) => {
    DBMS.getAsset(name, callback);
});

AssetProfileTmpl(this['LocalAssetProfile']={}, '.local-asset-profile-tab ', 'localAssetProfileStructure', true, (callback) => {
    var shopName = ShopManagement.getCurrentShopName();
    DBMS.getShop(shopName, function(err, shopData){
        if(err) {callback(err); return;}
        var localAssets = R.keys(shopData.localAssets).sort(CommonUtils.charOrdA).map(name => {
            return {
                displayName: name,
                value: name
            }
        });
        callback(null,localAssets);
    });
}, (assetName, fieldName, value, callback) => {
    DBMS.updateLocalAssetField(ShopManagement.getCurrentShopName(), assetName, fieldName, value, callback);
}, (name, callback) => {
    DBMS.getLocalAsset(ShopManagement.getCurrentShopName(), name, (err, asset) => {
        if(err) {callback(err); return;}
        asset.name = name;
        callback(null, asset);
    });
});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

var About = {};

About.init = function() {
    "use strict";

    About.content = getEl('aboutDiv');
};

About.refresh = function() {
};

//# sourceMappingURL=data:application/json;base64,
