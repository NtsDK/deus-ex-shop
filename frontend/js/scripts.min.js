/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, Database, Migrator
 */
"use strict";

function makeLocalDBMS(fullVersion){
//    if(!fullVersion){
//        function LocalDBMS(){
//        };
//        return LocalDBMS;
//    }
    
    var opts = {
        Migrator     : Migrator    ,
        CommonUtils  : CommonUtils ,
        EventEmitter : EventEmitter,
        R            : R           ,
        Ajv          : Ajv         ,
        Schema       : Schema      ,
        Errors       : Errors      ,
        listeners    : {}          ,
        Constants    : Constants   ,
        dbmsUtils    : {}          ,
        dateFormat   : dateFormat  ,
    };
    
    function LocalDBMS(){
        this._init(opts.listeners);
    };
    
    LocalDBMS.prototype.getSettings = function(){
        "use strict";
        return this.database.Settings;
    };
    
    var func = (name) => window[name](LocalDBMS, opts);
    
    ["baseAPI"               ,
    "consistencyCheckAPI"   ,
    "entityAPI"             ,
    "logAPI"                ,
    "shopAPI"               ,
    "assetsAPI"               ,
    "externalAPI"               ,
//    "statisticsAPI"         ,
//    "profilesAPI"           ,
//    "profileBindingAPI"     ,
//
//    "profileViewAPI"        ,
//    
//    "groupsAPI"             ,
//    "groupSchemaAPI"        ,
//    "investigationBoardAPI" ,
//    "relationsAPI"          ,
//    "briefingExportAPI"     ,
//    
//    "profileConfigurerAPI"  ,
//    "storyBaseAPI"          ,
//    "storyEventsAPI"        ,
//    "storyCharactersAPI"    ,
//    
//    "storyViewAPI"          ,
//    "storyAdaptationsAPI"   ,
//    "accessManagerAPI"      ,
//    "textSearchAPI"         ,
    ].map(func);
    
    Logger.attachLogCalls(LocalDBMS, R, false);
    return LocalDBMS;
};



/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, Database
 */
"use strict";

var showNotification = true;
function makeRemoteDBMS(LocalDBMS){
    
//    var url = "/";

    var url = window.location.href.substring(0, window.location.href.lastIndexOf('/')+1);
//    var url = window.location.pathname;
    
    function RemoteDBMS(){
        this.clearSettings();
    };
    
    RemoteDBMS._simpleGet = function(name, params, callback){
        "use strict";
        var paramStr = "";
        if(params){
            paramStr = "?params=" + encodeURIComponent(JSON.stringify(params)); ; 
        }
        
        var request = $.ajax({
            url : url + name + paramStr,
            dataType : "text",
            method : "GET",
            contentType : "application/json;charset=utf-8",
            cache: false,
            timeout: Constants.httpTimeout,
        });
        
        request.done(function(data) {
            callback(null, JSON.parse(data));
        });
        
        request.fail(function(errorInfo, textStatus, errorThrown) {
            try {
                callback(JSON.parse(errorInfo.responseText));
            } catch(err){
                callback(errorInfo.responseText || textStatus || 'error');
            }
        });
    };
    
    RemoteDBMS._simplePut = function(name, data, callback){
        "use strict";
        var request = $.ajax({
            url : url + name,
            dataType : "text",
            method : "PUT",
            contentType : "application/json;charset=utf-8",
            data: JSON.stringify(data),
            timeout: Constants.httpTimeout
        });
        
        if(showNotification){
            var notificationBox = clearEl(getEl('debugNotification'));
            removeClass(notificationBox, 'hidden');
            removeClass(notificationBox, 'operationOK');
            removeClass(notificationBox, 'operationFail');
//            addEl(notificationBox, makeText(name + ' ' + JSON.stringify(data)));
            addEl(notificationBox, makeText(name));
        }
        
        request.done(function(data) {
            if(showNotification){
                addClass(notificationBox, 'operationOK');
                setTimeout(function(){
                    addClass(notificationBox, 'hidden');
                }, 2000);
            }
            if(callback) callback();
        });
        
        request.fail(function(errorInfo, textStatus, errorThrown) {
            if(showNotification){
                addClass(notificationBox, 'operationFail');
                setTimeout(function(){
                    addClass(notificationBox, 'hidden');
                }, 2000);
            }
            try {
                callback(JSON.parse(errorInfo.responseText));
            } catch(err){
                callback(errorInfo.responseText || textStatus || 'error');
            }
        });
    };
    
    
    Object.keys(LocalDBMS.prototype).forEach(function(name){
        RemoteDBMS.prototype[name] = function(){
            var arr = [];
            for (var i = 0; i < arguments.length-1; i++) {
                arr.push(arguments[i]);
            }
//            if(CommonUtils.startsWith(name, "_")){
//                // do nothing for inner functions
//            } else 
            if(CommonUtils.startsWith(name, "get") || CommonUtils.startsWith(name, "is")){
                RemoteDBMS._simpleGet(name, arr, arguments[arguments.length-1]);
            } else {
                RemoteDBMS._simplePut(name, arr, arguments[arguments.length-1]);
            }
        }
    });
    
    
    RemoteDBMS.prototype.clearSettings = function() {
        "use strict";
        this.Settings = {
                "BriefingPreview" : {},
                "Stories" : {},
                "ProfileEditor" : {}
        };
    };
    
    RemoteDBMS.prototype.getSettings = function(){
        "use strict";
        return this.Settings;
    };
    return RemoteDBMS;
};



/*Copyright 2015-2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, saveAs, FileReader, Blob
 */

"use strict";

var FileUtils = {};

FileUtils.init = function (callback) {
    "use strict";
    FileUtils.callback = callback;
};

FileUtils.makeNewBase = function () {
    "use strict";
    Utils.confirm(getL10n("utils-new-base-warning"), () => {
        DBMS.setDatabase(CommonUtils.clone(EmptyBase.data), FileUtils.callback);
    });
};

FileUtils.openHelp = function () {
    "use strict";
    window.open("extras/doc/nims.html");
};

FileUtils.readSingleFile = function (evt) {
    "use strict";
    // Retrieve the first (and only!) File from the FileList object
    var f = evt.target.files[0];

    if (f) {
        var r = new FileReader();
        r.onload = function (e) {
            var contents = e.target.result;
            var database = JSON.parse(contents);
            DBMS.setDatabase(database, FileUtils.callback);
        };
        r.readAsText(f);
    } else {
        Utils.alert(getL10n("utils-base-file-loading-error"));
    }
};

FileUtils.saveFile = function () {
    "use strict";
    DBMS.getDatabase(function(err, database){
        if(err) {Utils.handleError(err); return;}
        FileUtils.json2File(database, "nims-base.json");
    });
};

FileUtils.json2File = function (str, fileName) {
    "use strict";
    FileUtils.str2File(JSON.stringify(str, null, '  '), fileName);
};

FileUtils.str2File = function (str, fileName) {
    "use strict";
    var blob = new Blob([ str ], {
        type : "text/plain;charset=utf-8"
    });
    saveAs(blob, fileName);
};


/*Copyright 2015-2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 */

"use strict";

(function(exports, Dictionaries){

    var state = {};
    
    state.initialized = false;
    state.l10nDelegates = [];
    state.dictionaries = {};
    state.lang = defaultLang;
    
    var init = function(){
        if(state.initialized){
            return;
        }
//        console.log(navigator.language);
        
        for(var name in Dictionaries){
            state.dictionaries[name] = processDictionary(Dictionaries[name]);
        }
        
    //    var lang = (navigator.languages ? navigator.languages[0] : navigator.browserLanguage).split('-')[0];
    //    var lang = 'ru';
//        var lang = defaultLang;
//        console.log(lang);
        
        if(state.dictionaries[defaultLang]){
            state.dict = state.dictionaries[defaultLang];
        } else {
            state.dict = state.dictionaries['en'];
        }
        setHtmlLang(defaultLang);
        exports.onL10nChange(exports.localizeStatic);
        state.initialized = true;
    };
    
    var processDictionary = function(dictionary){
        var processedDictionary = {};
        for(var sectionName in dictionary){
            for(var name in dictionary[sectionName]){
                processedDictionary[sectionName+"-"+name] = dictionary[sectionName][name];
            }
        } 
        return processedDictionary;
    };
    
    var setHtmlLang = (lang) => setAttr(document.getElementsByTagName("html")[0],'lang', lang);
    
    exports.toggleL10n = function(){
        if(state.lang === "ru"){
            state.dict = state.dictionaries['en'];
            state.lang = "en";
        } else {
            state.dict = state.dictionaries['ru'];
            state.lang = "ru";
        }
        setHtmlLang(state.lang);
        state.l10nDelegates.forEach(function(delegate){
            delegate();
        });
    };
    
    exports.getLang = () => state.lang.toLowerCase();
    
    exports.format = R.curry(function(namespace, name, args){
        return strFormat(exports.get(namespace, name), args);
    });

    exports.get = R.curry(function(namespace, name){
        return L10n.getValue(namespace + '-' + name);
    });
    
    exports.getValue = function(name){
        var value = state.dict[name];
        if(value === undefined) console.log("Value is not found: " + name);
        return value ? value : name + ":RA RA-AH-AH-AH ROMA ROMA-MA GAGA OH LA-LA";
    };
    
    exports.onL10nChange = function(delegate){
        state.l10nDelegates.push(delegate);
    };
    
    exports.localizeStatic = function(){
        init();
        nl2array(document.querySelectorAll("[l10n-id]")).map(el => addEl(clearEl(el), makeText(exports.getValue(getAttr(el,"l10n-id")))));
        nl2array(document.querySelectorAll("[l10n-placeholder-id]")).map(el => setAttr(el,"placeholder", exports.getValue(getAttr(el,"l10n-placeholder-id"))));
    };

})(this['L10n']={}, Dictionaries);
/*Copyright 2015-2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(exports){

    exports.initTabPanel = function(tabClazz, containerClazz) {
        var containers = getEls(containerClazz);
    
        var i;
        for (i = 1; i < containers.length; i++) { // don't hide 1st element
            addClass(containers[i], "hidden");
        }
    
        var tabButtons = getEls(tabClazz);
    
        addClass(tabButtons[0], "active");
    
        for (i = 0; i < tabButtons.length; i++) {
            listen(tabButtons[i], "click", tabButtonClick(tabButtons, containers));
        }
    };
    
    var tabButtonClick = function(buttons, containers) {
        return function(event) {
            for (var i = 0; i < buttons.length; i++) {
                setClassByCondition(buttons[i], "active", event.target.id === buttons[i].id);
            }
            for (var i = 0; i < containers.length; i++) {
                setClassByCondition(containers[i], "hidden", event.target.id + "Container" !== containers[i].id);
            }
        };
    };
    
    exports.fillShowItemSelector = function (selector, displayArray) {
        var el;
        setAttr(selector, "size", displayArray.length);
        displayArray.forEach(function(value) {
            el = setProps(makeEl("option"), {
                "selected" : true,
            });
            setClassByCondition(el, 'hidden', value.hidden);
            addEl(selector, addEl(el, makeText(value.name)));
        });
    };
    
    exports.fillShowItemSelector2 = function (selector, optionGroups) {
        var el, groupEl, counter = 0;
        addEls(selector, optionGroups.map(function(group) {
            counter++;
            groupEl = setAttr(makeEl("optgroup"), 'label', group.name);
            addEls(groupEl, group.array.map((value) => {
                el = setProps(makeEl("option"), {
                    "selected" : true,
                });
                setClassByCondition(el, 'hidden', value.hidden);
                counter += (value.hidden ? 0 : 1);
                return addEl(el, makeText(value.name));
            }));
            return groupEl;
        }));
        setAttr(selector, "size", counter);
    };
    
    exports.showSelectedEls = function(classKey){
        return function(event){
            var el = event.target;
            var els, i, j;
            for (i = 0; i < el.options.length; i += 1) {
                els = getEls(i + classKey);
                for (j = 0; j < els.length; j++) {
                    setClassByCondition(els[j], "hidden", !el.options[i].selected);
                }
            }
        }
    };
    
    exports.initSelectorFilters = function(){
        var elems = document.querySelectorAll("[selector-filter]");
        var el, sel;
        for (var i = 0; i < elems.length; i++) {
            el = elems[i];
            sel = queryEl(getAttr(el,"selector-filter"));
            el.value = '';
            listen(el, "input", filterOptions(sel))
        }
    };
    
    var filterOptions = function(sel){
        return function(event){
            var val = event.target.value;
            var i, opt;
            val = CommonUtils.globStringToRegex(val.trim().toLowerCase());
            for (i = 0; i < sel.options.length; i += 1) {
                opt = sel.options[i];
                var isVisible = opt.innerHTML.toLowerCase().search(val) !== -1;
                if(!isVisible){
                    opt.selected = false;
                }
                setClassByCondition(opt, "hidden", !isVisible);
//                setClassByCondition(opt, "hidden", opt.innerHTML.toLowerCase().search(val) === -1);
            }
            sel.dispatchEvent(new Event('change'));
        }
    };
    
    exports.initPanelTogglers = function(){
        var elems = document.querySelectorAll("[panel-toggler]");
        var el, sel, attr;
        for (var i = 0; i < elems.length; i++) {
            el = elems[i];
            attr = getAttr(el,"panel-toggler");
            sel = document.querySelector(attr);
            if(sel == null){
                Utils.alert("Panel toggler is broken: " + attr);
            }
            listen(el, "click", exports.togglePanel(sel))
        }
    };
    
    exports.togglePanel = function(sel){
        return function(event){
            toggleClass(sel, "hidden");
        }
    };
    
    exports.makeEventTimePicker = function (opts) {
        var input = makeEl("input");
        R.ap([addClass(input)], opts.extraClasses);
        addClass(input, "eventTime");
        input.value = opts.eventTime;
        
        input.eventIndex = opts.index;
        
        var pickerOpts = {
            lang : L10n.getLang(),
            mask : true,
            startDate : new Date(opts.preGameDate),
            endDate : new Date(opts.date),
            onChangeDateTime : opts.onChangeDateTimeCreator(input),
        };
        
        if (opts.eventTime !== "") {
            pickerOpts.value = opts.eventTime;
        } else {
            pickerOpts.value = opts.date;
            addClass(input, "defaultDate");
        }
        
        jQuery(input).datetimepicker(pickerOpts);
        return input;
    };
    
    // bug about setting 0900 years in Braavos game is event date. Fixed in production.
//  exports.makeEventTimePicker = function (opts) {
//      var input = makeEl("input");
//      R.ap([addClass(input)], opts.extraClasses);
//      addClass(input, "eventTime");
//      input.value = opts.eventTime;
//      
//      input.eventIndex = opts.index;
//      
//      var pickerOpts = {
//          lang : L10n.getLang(),
//          mask : true,
//          startDate : new Date(opts.preGameDate),
//          endDate : new Date(opts.date),
//          onChangeDateTime : opts.onChangeDateTimeCreator(input),
//      };
//      
//      var picker = jQuery(input).datetimepicker(pickerOpts);
//      
//      var value;
//      if (opts.eventTime !== "") {
//          value = new Date(opts.eventTime);
//      } else {
//          value = opts.date;
//          addClass(input, "defaultDate");
//      }
//      
//      picker.value = value;
//      
//      
//      return input;
//  };
    
    exports.resizeTextarea = function (ev) {
        var that = ev.target;
        that.style.height = '24px';
        that.style.height = that.scrollHeight + 12 + 'px';
    };
    
    exports.resizeTextarea2 = function (that) {
        that.style.height = '24px';
        that.style.height = that.scrollHeight + 12 + 'px';
    };
    
    exports.makeAdaptationTimeInput = function(storyName, event, characterName, isEditable){
        var input = makeEl("input");
        setClassByCondition(input, "notEditable", !isEditable);
        addClass(input,"adaptationTimeInput");
        input.value = event.characters[characterName].time;
        input.dataKey = JSON.stringify([storyName, event.index, characterName]);
        listen(input, "change", onChangePersonalTimeDelegate);
        return input;
    };
    
    var onChangePersonalTimeDelegate = function (event) {
        var dataKey = JSON.parse(event.target.dataKey);
        var time = event.target.value;
        DBMS.setEventAdaptationProperty(dataKey[0], dataKey[1], dataKey[2], 'time', time, Utils.processError());
    };
    
    exports.makeAdaptationReadyInput = function(storyName, event, characterName, isEditable){
        var div = makeEl("div");
        var input = makeEl("input");
        setClassByCondition(input, "notEditable", !isEditable);
        input.type = "checkbox";
        input.checked = event.characters[characterName].ready;
        input.dataKey = JSON.stringify([storyName, event.index, characterName]);
        input.id = event.index + "-" + storyName + "-" + characterName;
        listen(input, "change", onChangeReadyStatus);
        addEl(div, input);
        
        addEl(div, setAttr(addEl(makeEl("label"), makeText(constL10n(Constants.finishedText))), "for", input.id));
        return div;
    };
    
    var onChangeReadyStatus = function (event) {
        var dataKey = JSON.parse(event.target.dataKey);
        var value = event.target.checked;
        DBMS.setEventAdaptationProperty(dataKey[0], dataKey[1], dataKey[2], 'ready', value, Utils.processError());
    };
    
    exports.makePanelCore = function(title, content){
        var panel = addClasses(makeEl('div'), ["panel", "panel-default"]);
        var h3 = addClass(addEl(makeEl('h3'), title), "panel-title");
        var a = setAttr(makeEl('a'),'href','#/');
        var headDiv = addClass(makeEl('div'), "panel-heading");
        addEl(panel, addEl(headDiv, addEl(a, h3)));
        var contentDiv = addClass(makeEl('div'), "panel-body");
        addEl(panel, addEl(contentDiv, content));
        return {
            panel: panel,
            contentDiv: contentDiv,
            a: a
        };
    };
    
    exports.makeProfileTable = function(profileStructure, profile){
        var value;
        var profileDiv = addEls(makeEl('tbody'), profileStructure.filter(element => element.doExport).map(function (element) {
            switch (element.type) {
            case "text":
                value = addClass(makeEl("span"), "briefingTextSpan");
                addEl(value, makeText(profile[element.name]));
                break;
            case "enum":
            case "multiEnum":
            case "number":
            case "string":
                value = makeText(profile[element.name]);
                break;
            case "checkbox":
                value = makeText(constL10n(Constants[profile[element.name]]));
                break;
            default:
                throw new Error('Unexpected type ' + element.type);
            }
            return exports.makeTableRow(makeText(element.name), value);
        }));
        return addEl(addClasses(makeEl('table'), ['table','table-striped']), profileDiv);
    };
    
    exports.makeTableRow = function(col1, col2){
        return addEls(makeEl('tr'), [addEl(makeEl('td'), col1), addEl(makeEl('td'),col2)]);
    };

})(this['UI']={});
/*Copyright 2015-2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

var Utils = {};

/** opts
 *      tooltip - add tooltip to button, used for iconic buttons
 *      id - set button id
 *      mainPage - enable view as first page
 *      toggle - toggle content, associated with button
 */
Utils.addView = function (containers, name, view, opts) {
    "use strict";
    var opts = opts || {};
    view.init();
    var buttonClass = "navigation-button";
    containers.root.views[name] = view;
    var button = makeEl("button");
    if(opts.tooltip){
        var delegate = function(){
            $(button).attr('data-original-title', L10n.getValue("header-" + name));
        };
        L10n.onL10nChange(delegate);
        $(button).tooltip({
            title : L10n.getValue("header-" + name),
            placement : "bottom"
        });
    } else {
        addEl(button, makeText(L10n.getValue("header-" + name)));
        setAttr(button, "l10n-id", "header-" + name);
    }
    addClass(button, buttonClass);
    addClass(button, "-test-" + name);
    addClass(button, "-toggle-class-" + name);
    if(opts.clazz){
        addClass(button, opts.clazz);
    }
    containers.navigation.appendChild(button);
    

    var elems, i;
    var onClickDelegate = function (view) {
        return function (evt) {
            //Tests.run();
            elems = containers.navigation.getElementsByClassName(buttonClass);
            if(opts.toggle){
                var els = getEls("-toggle-class-" + name);
                for (var i = 0; i < els.length; i++) {
                    if(evt.target.isEqualNode(els[i])){
                        continue;
                    }
                    if(hasClass(els[i], "active")){
                        els[i].click();
                    }
                }
            }
            
            var isActive = hasClass(evt.target, "active");
            for (i = 0; i < elems.length; i++) {
                removeClass(elems[i], "active");
            }
            if(!opts.toggle || (opts.toggle && !isActive)){
                addClass(evt.target, "active");
                
                passEls(containers.content, getEl('warehouse'));
                containers.content.appendChild(view.content);
                removeClass(containers.content, "hidden");
                containers.root.currentView = view;
                view.refresh();
            } else {
                removeClass(evt.target, "active");
                passEls(containers.content, getEl('warehouse'));
                containers.root.currentView = null;
                addClass(containers.content, "hidden");
            }
        };
    };

    button.addEventListener("click", onClickDelegate(view));
    if (opts.mainPage) {
        addClass(button, "active");
        containers.content.appendChild(view.content);
        containers.root.currentView = view;
    }
};

Utils.alert = function (message) {
    vex.dialog.alert(message);
};

Utils.confirm = function (message, onOk, onCancel) {
    vex.dialog.confirm({
        message: message,
        callback: (val) => {
            if(val){
                if(onOk) onOk();
            } else {
                if(onCancel) onCancel();
            }
        }
    });
};

Utils.removeChildren = function (myNode) {
    "use strict";
    if (!myNode) {
        return;
    }
    while (myNode.firstChild) {
        myNode.removeChild(myNode.firstChild);
    }
};

Utils.processError = function(callback){
    return function(err){
        if(err) {
            Utils.handleError(err);
            return;
        }
        
        if(callback){
            var arr = [];
            for (var i = 1; i < arguments.length; i++) {
                arr.push(arguments[i]);
            }
            callback.apply(null, arr);
        }
    }
};

Utils.handleErrorMsg = function(err){
    var checkErrorType = R.curry(function(err, name){
        return err instanceof Errors[name] || (err.name && err.name === name)
    });
    if (R.keys(Errors).some(checkErrorType(err))) {
        return strFormat(getL10n(err.messageId), err.parameters);
    } else if( typeof err === 'object'){
        return err.message;
    } else {
        return err;
    }
};

Utils.handleError = (err) => Utils.alert(Utils.handleErrorMsg(err));

Utils.enableEl = R.curry(function(el, condition){
    var key = el.tagName.toLowerCase() === "textarea" ? "readonly" : "disabled";
    if(condition){
        el.removeAttribute(key);
    } else {
        el.setAttribute(key,key);
    }
});

Utils.enable = function(root, className, condition){
    nl2array(root.getElementsByClassName(className)).map(Utils.enableEl(R.__, condition));
};

Utils.charOrdAObject = CommonUtils.charOrdAFactory(function(a){
    return a.displayName.toLowerCase();
});

Utils.rebuildSelector = function(selector, names){
    "use strict";
    clearEl(selector);
    names.forEach(function (nameInfo) {
        var option = makeEl("option");
        option.appendChild(makeText(nameInfo.displayName));
        option.value = nameInfo.value;
        selector.appendChild(option);
    });
};

Utils.rebuildSelectorArr = function(selector, names){
    "use strict";
    clearEl(selector);
    names.forEach(function (name) {
        var option = makeEl("option");
        option.appendChild(makeText(name));
        selector.appendChild(option);
    });
};

String.prototype.endsWith = function (suffix) {
    "use strict";
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

var strFormat = R.curry(CommonUtils.strFormat);

function getL10n(key){
    return L10n.getValue(key);
};

function constL10n(key){
    return L10n.getValue('constant-' + key);
}

function isEmpty (obj) {
    "use strict";
    return (Object.getOwnPropertyNames(obj).length === 0);
};

var addClass = R.curry(function(o, c){
    var re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g")
    if (re.test(o.className)) return;
    o.className = (o.className + " " + c).replace(/\s+/g, " ").replace(/(^ | $)/g, "");
    return o;
});

var addClasses = R.curry(function(o, c){
    R.ap([addClass(o)], c);
    return o;
});

var rAddClass = R.curry(function(c, o){
  var re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g")
  if (re.test(o.className)) return;
  o.className = (o.className + " " + c).replace(/\s+/g, " ").replace(/(^ | $)/g, "");
  return o;
});

var toggleClass = R.curry(function(o, c){
    if(hasClass(o, c)){
        removeClass(o, c);
    } else {
        addClass(o, c);
    }
});

function hasClass(o, c){
    var re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g")
    return (re.test(o.className));
};
 
var removeClass = R.curry(function(o, c){
    var re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g")
    o.className = o.className.replace(re, "$1").replace(/\s+/g, " ").replace(/(^ | $)/g, "")
});

function setClassByCondition(o,c,condition){
    if(condition){
        addClass(o,c);
    } else {
        removeClass(o,c);
    }
    return o;
};

function getEl(id){
  return document.getElementById(id);
};

function queryEl(sel){
    return document.querySelector(sel);
};

function queryEls(sel){
    return nl2array(document.querySelectorAll(sel));
};

function queryElEls(el, sel){
    return nl2array(el.querySelectorAll(sel));
};

function getEls(clazz){
  return document.getElementsByClassName(clazz);
};

function makeEl(elTag){
  return document.createElement(elTag);
};

function makeText(text){
  return document.createTextNode(text);
};

var addEl = R.curry(function(parent, child){
    parent.appendChild(child);
    return parent;
});
var addEls = R.curry(function(parent, children){
    R.ap([addEl(parent)], children);
    return parent;
});

var makeOpt = function(label){
    var option = makeEl("option");
    addEl(option, (makeText(label)));
    return option;
};

var rAddEl = R.curry(function(child, parent){
  parent.appendChild(child);
  return parent;
});

var setAttr = R.curry(function(el, name, value){
  el.setAttribute(name, value);
  return el;
});

var setStyle = R.curry(function(el, name, value){
    el.style[name] = value;
    return el;
});

function delAttr(el, name){
    el.removeAttribute(name);
    return el;
};

function getAttr(el, name){
    return el.getAttribute(name);
};

var setProp = R.curry(function(el, key, value){
  el[key] = value;
  return el;
});

var setProps = R.curry(function(el, map){
  for(var key in map){
    setProp(el, key, map[key]);
  }
  return el;
});

function clearEl(el){
  Utils.removeChildren(el);
  return el;
};

function passEls(src, dst){
    for (var i = 0; i < src.children.length; i++) {
        addEl(dst, src.children[i]);
    }
};

var listen = R.curry(function(el, event, listener){
  el.addEventListener(event, listener);
  return el;
});

var listenOnEnter = R.curry(function(el, callback){
    listen(el, 'keydown', function(e) {
        if (e.keyCode === 13) {
            callback();
        }
    });
});

var fillSelector = R.curry(function(sel, data){
    return addEls(sel, data.map(function (item) {
        var opt = makeEl("option");
        addEl(opt, makeText(item.name));
        if(item.value){opt.value = item.value;}
        if(item.selected){opt.selected = true;}
        if(item.className){addClass(opt, item.className);}
        return opt;
    }));
});

function nl2array(nodeList){
    return Array.prototype.slice.call(nodeList);
};

var remapProps = R.curry(function(outKeys, pickKeys, obj){
    return R.compose(R.zipObj(outKeys), R.values, R.pick(pickKeys))(obj);
});

var remapProps4Select2 = remapProps(['id','text'], ['value', 'displayName']);
var remapProps4Select = remapProps(['value','name'], ['value', 'displayName']);

var getSelect2DataCommon = R.curry(function(preparator, obj){ 
    return R.compose(R.zipObj(['data']), R.append(R.__, []), R.map(preparator))(obj);
});

var getSelect2Data = getSelect2DataCommon(remapProps4Select2);

var makeSelect2Opt = R.compose(R.zipObj(['id', 'text']), R.repeat(R.__, 2));
var arr2Select2 = R.compose(R.assoc('data', R.__, {}), R.map(makeSelect2Opt));
var arr2Select = R.map(R.compose(R.zipObj(['value','name']), R.repeat(R.__, 2)));
var constArr2Select = R.map(R.compose(R.zipObj(['value','name']), (name) => [name, constL10n(name)]));

var getSelectedRadio = function(query){
    var els = document.querySelectorAll(query);
    for (var i = 0; i < els.length; i++) {
        if(els[i].checked === true){
            return els[i];
        }
    }
    return null;
};

var debugInterceptor = function(callback){
    return function(){
        console.log(JSON.stringify(arguments[0]));
        callback.apply(null, arguments);
    }
};

// from date format utils
//For convenience...
Date.prototype.format = function (mask, utc) {
    return dateFormat(this, mask, utc);
};


/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
Utils, Overview, Profiles, Stories, Adaptations, Briefings, Timeline, SocialNetwork, FileUtils
 */

"use strict";

(function(exports){

    var state = {};
    state.views = {};
    
    var btnOpts = {
        tooltip : true,
        className : 'mainNavButton'
    }
    
    var initPage = function(){
        L10n.localizeStatic();
        L10n.onL10nChange(() => state.currentView.refresh());
        UI.initSelectorFilters();
        UI.initPanelTogglers();
        function updateDialogs(){
            vex.dialog.buttons.YES.text = getL10n('common-ok');
            vex.dialog.buttons.NO.text = getL10n('common-cancel');
        }
        updateDialogs();
        L10n.onL10nChange(updateDialogs);
    }
    
    var curTheme = Constants.themeList[1];
    
    var initTheme = function() {
        if(DBMS.setTheme){
            DBMS.getTheme(function(err, theme){
                if(err) {console.log(err);}
                if(theme !== ''){
                    curTheme = theme;
                }
                addClass(queryEl('body'), curTheme);
            });
        } else {
            addClass(queryEl('body'), curTheme);
        }
    };
    
    var nextTheme = function() {
        removeClass(queryEl('body'), curTheme);
        curTheme = Constants.themeList[(R.indexOf(curTheme, Constants.themeList)+1)%Constants.themeList.length];
        addClass(queryEl('body'), curTheme);
        if(DBMS.setTheme){
            DBMS.setTheme(curTheme, function(err){
                if(err) {console.log(err); return;}
            });
        }
    };
    
    var protoExpander = function(arr){
        function protoCarrier(){};
        arr.forEach( name => protoCarrier.prototype[name] = (() => 1));
        return protoCarrier;
    };
    
    var playerArr = [
                    'getShop'        ,
                    "createCategory" ,
                    "renameCategory" ,
                    "removeCategory" ,
                    
                    "getLocalAsset",
                    "createLocalAsset",
                    "renameLocalAsset",
                    "removeLocalAsset",
                    
                    "updateLocalAssetField",
                    "setAssetCost",
                    "addGlobalAssetToCategory",
                    "addLocalAssetToCategory" ,
                    
                    "removeGlobalAssetFromCategory",
                    "removeLocalAssetFromCategory",
                    "getShopName",
                    "getAsset",
                    
                    "getShopIndex",
                    "getGlobalAssetDisplayNames",
                    "buyAsset",
                    "getTheme",
                    "setTheme",
                    ];
    
    exports.onPlayerPageLoad = function () {
        initPage();
        var RemoteDBMS = makeRemoteDBMS(protoExpander(playerArr));
        window.DBMS = new RemoteDBMS();
        initTheme();
        stateInit();
        Utils.addView(state.containers, "shop-management", PlayerShopManagement, {mainPage:true});
        Utils.addView(state.containers, "shop-window", ShopWindow);
        Utils.addView(state.containers, "shop-about", ShopAbout);
        addEl(state.navigation, addClass(makeEl("div"), "nav-separator"));
        addEl(state.navigation, makeL10nButton());
        addEl(state.navigation, makeButton("themeButton", "theme", () => nextTheme(), btnOpts));
        addEl(state.navigation, makeButton("logoutButton", "logout", postLogout, btnOpts));
        addEl(state.navigation, makeButton("refreshButton", "refresh", () => state.currentView.refresh(), btnOpts));
        addEl(state.navigation, makeButton("fullScreenButton", "fullScreen", toggleToolbarButtons, btnOpts));
        state.currentView.refresh();
    };
    
    var toggleToolbarButtons = () => {
        queryEls('#navigation > button').filter( button => !hasClass(button, 'refreshButton') && !hasClass(button, 'fullScreenButton'))
                                        .map(toggleClass(R.__, 'hidden'));
    };
    
    exports.onIndexPageLoad = function () {
        initPage();
        var RemoteDBMS = makeRemoteDBMS(protoExpander(['getPlayersOptions','getRoleGridInfo']));
        window.DBMS = new RemoteDBMS();
        initTheme();
        stateInit();
        addEl(state.navigation, addClass(makeEl("div"), "nav-separator"));
        Utils.addView(state.containers, "enter", Enter, {mainPage:true});
            addEl(state.navigation, makeL10nButton());
        state.currentView.refresh();
    };
    
    exports.onMasterPageLoad = function () {
        initPage();
        var LocalDBMS = makeLocalDBMS(true);
        if(MODE === "Standalone"){
            window.DBMS = new LocalDBMS();
            DBMS.setDatabase(BaseExample.data, function(err){
                if(err) {Utils.handleError(err); return;}
                consistencyCheck(onDatabaseLoad);
            });
        } else if(MODE === "NIMS_Server") {
            var RemoteDBMS = makeRemoteDBMS(LocalDBMS);
            window.DBMS = new RemoteDBMS();
            consistencyCheck(onDatabaseLoad);
        }
    };
    
    var consistencyCheck = function(callback){
        DBMS.getConsistencyCheckResult(function(err, consistencyErrors){
            if(err) {Utils.handleError(err); return;}
            consistencyErrors.forEach(CommonUtils.consoleLog);
            if(consistencyErrors.length > 0){
                Utils.alert(getL10n('overview-consistency-problem-detected'));
            } else {
                console.log('Consistency check didn\'t find errors');
            }
            callback();
        });
    };
    
    var stateInit = function(){
        state.navigation = getEl("navigation");
        state.containers = {
                root: state,
                navigation: state.navigation,
                content: getEl("contentArea")
        };
    };
    
    var onDatabaseLoad = function () {
        initTheme();
        PermissionInformer.refresh(function(err){
            if(err) {Utils.handleError(err); return;}
            
            PermissionInformer.isAdmin(function(err, isAdmin){
                if(err) {Utils.handleError(err); return;}
                
                var button;
                stateInit();

                Utils.addView(state.containers, "shop-management", MasterShopManagement, {mainPage:true});
                Utils.addView(state.containers, "shops2", Shops2);
                Utils.addView(state.containers, "assets", Assets);
                Utils.addView(state.containers, "apiCheck", ApiCheck);
                
                addEl(state.navigation, addClass(makeEl("div"), "nav-separator"));
                
                if(isAdmin){
                    var button = makeButton("dataLoadButton", "open-database", null, btnOpts);
                    button.addEventListener('change', FileUtils.readSingleFile, false);
                    
                    var input = makeEl("input");
                    input.type = "file";
                    addClass(input, 'hidden');
                    setAttr(input, 'tabindex', -1);
                    button.appendChild(input);
                    button.addEventListener('click', function(e){
                        input.click();
    //                    e.preventDefault(); // prevent navigation to "#"
                    });
                    addEl(state.navigation, button);
                }
                
                addEl(state.navigation, makeButton("themeButton", "theme", () => nextTheme(), btnOpts));
                addEl(state.navigation, makeButton("dataSaveButton", "save-database", FileUtils.saveFile, btnOpts));
                if(MODE === "Standalone"){
                    addEl(state.navigation, makeButton("newBaseButton", "create-database", FileUtils.makeNewBase, btnOpts));
                }
//                addEl(state.navigation, makeButton("mainHelpButton", "docs", FileUtils.openHelp, btnOpts));
                
                addEl(state.navigation, makeL10nButton());
                
                Utils.addView(state.containers, "logViewer", LogViewer2, {clazz:"logViewerButton", tooltip:true});
                addEl(state.navigation, makeButton("testButton", "test", runTests, btnOpts));
                if(MODE === "NIMS_Server"){
//                    Utils.addView(state.containers, "admins", AccessManager, {clazz:"accessManagerButton", tooltip:true});
                    addEl(state.navigation, makeButton("logoutButton", "logout", postLogout, btnOpts));
                }
                addEl(state.navigation, makeButton("refreshButton", "refresh", () => state.currentView.refresh(), btnOpts));
                
                FileUtils.init(function(err){
                    if(err) {Utils.handleError(err); return;}
                    consistencyCheck(state.currentView.refresh);
                });
                
                state.currentView.refresh();
                if(MODE === "Standalone") {
                    addBeforeUnloadListener();
                }
            });
        });
        
    };
    
    var makeL10nButton = function(){
        var l10nBtn = makeButton("toggleL10nButton", "l10n", L10n.toggleL10n, btnOpts);
        var setIcon = function(){
            l10nBtn.style.backgroundImage = strFormat('url("./images/{0}.svg")', [getL10n('header-dictionary-icon')]);
        }
        L10n.onL10nChange(setIcon);
        setIcon();
        return l10nBtn;
    };
    
    var runTests = function(){
    //    window.RunTests();
        consistencyCheck(function(err, checkRes){
            if(err) {Utils.handleError(err); return;}
            if(checkRes === undefined || checkRes.length === 0){
                Utils.alert(getL10n('overview-consistency-is-ok'));
            } else {
                Utils.alert(getL10n('overview-consistency-problem-detected'));
            }
        });
    };
    
    var postLogout = function(){
        document.querySelector('#logoutForm button').click();
    };
    
    var makeButton = function(clazz, name, callback, opts){
        var button = makeEl("button");
        addClass(button, clazz);
        if(opts.tooltip){
            var delegate = function(){
                $(button).attr('data-original-title', L10n.getValue("header-" + name));
            };
            L10n.onL10nChange(delegate);
            $(button).tooltip({
                title : L10n.getValue("header-" + name),
                placement : "bottom"
            });
        }
        addClass(button, "action-button");
        if(opts.className){
            addClass(button, opts.className);
        }
        if(callback){
            listen(button, 'click', callback);
        }
        return button;
    };
    
    var addBeforeUnloadListener = function(){
        window.onbeforeunload = function (evt) {
            var message = getL10n("utils-close-page-warning");
            if (typeof evt == "undefined") {
                evt = window.event;
            }
            if (evt) {
                evt.returnValue = message;
            }
            return message;
        };
    }
    

})(this['PageManager']={});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 */

"use strict";

(function(exports, mode){

    var state = {};
    
    state.summary = {};
    
    if(mode === "NIMS_Server" && PERMISSION_INFORMER_ENABLED){
        
        exports.refresh = function(callback) {
            callback();
        };
//        exports.refresh = function(callback) {
//            var request = $.ajax({
//                url : "/getPermissionsSummary",
//                dataType : "text",
//                method : "GET",
//                contentType : "application/json;charset=utf-8",
//                timeout: Constants.httpTimeout
//            });
//            
//            request.done(function(data) {
//                state.summary = JSON.parse(data);
//                if(callback){
//                    callback();
//                } else {
//                    exports.subscribe();
//                }
//    //        alert(data);
//    //        alert(state.summary);
//            });
//            
//            request.fail(function(errorInfo, textStatus, errorThrown) {
//                if(callback){
//                    callback(errorInfo.responseText || 'error');
//                } else {
//                    setTimeout(exports.subscribe, 500);
//                }
//            });
//        };
//        
//        exports.subscribe = function() {
//            
//            var request = $.ajax({
//                url : "/subscribeOnPermissionsUpdate",
//                dataType : "text",
//                method : "GET",
//                contentType : "application/json;charset=utf-8",
//                timeout: Constants.httpTimeout
//            });
//            
//            request.done(function(data) {
//                state.summary = JSON.parse(data);
//    //        alert(data);
//    //        alert(state.summary);
//                exports.subscribe();
//            });
//            
//            request.fail(function(errorInfo, textStatus, errorThrown) {
//                setTimeout(exports.subscribe, 500);
//            });
//        };
//        
//        exports.refresh();
    
        exports.isAdmin = function(callback){
            callback(null, state.summary.isAdmin);
        };
        
        exports.isEditor = function(callback){
            callback(null, state.summary.isEditor);
        };
        
        exports.isEntityEditable = function(type, entityName, callback) {
            callback(null, isObjectEditableSync(type, entityName));
        };
        
        var isObjectEditableSync = function(type, name){
            if(state.summary.isEditor){
                return true;
            }
            if(state.summary.existEditor){
                return false;
            }
            return state.summary.user[type].indexOf(name) !== -1;
        };
        
//        exports.getEntityNamesArray = R.curry(function(type, editableOnly, callback){
//            var userEntities = state.summary.user[type];
//            var allEntities = state.summary.all[type];
//            var ownerMap = state.summary.ownerMaps[type];
//            var names = allEntities.filter(function(name){
//                if(editableOnly){
//                    return isObjectEditableSync(type, name);
//                } else {
//                    return true;
//                }
//            }).map(function(name){
//                return {
//                    displayName : ownerMap[name] + ". " + name,
//                    value : name,
//                    editable : isObjectEditableSync(type, name),
//                    isOwner : userEntities.indexOf(name) !== -1
//                };
//            });
//            
//            names.sort(Utils.charOrdAObject);
//            
//            callback(null, names);
//        });
        
        exports.getEntityNamesArray = R.curry(function(type, editableOnly, callback){
            function processNames(err, names){
                if(err) {Utils.handleError(err); return;}
                var newNames = [];
                names.forEach(function(name){
                    newNames.push({
                        displayName:name,
                        value:name,
                        editable: true
                    });
                });
                callback(null, newNames);
            }
            DBMS.getEntityNamesArray(type, processNames);
        });
        
        exports.areAdaptationsEditable = function(adaptations, callback){
            var map = {};
            var isAdaptationRightsByStory = state.summary.isAdaptationRightsByStory;
            
            adaptations.forEach(function(elem){
                var key = elem.storyName + "-" + elem.characterName;
                if(isAdaptationRightsByStory){
                    map[key] = isObjectEditableSync('story', elem.storyName);
                } else {
                    map[key] = isObjectEditableSync('character', elem.characterName);
                }
            });
            
            callback(null, map);
        };
        
    } else if (mode === "Standalone"){
        
        exports.refresh = function(callback) {
            callback();
        };
        
        exports.isAdmin = function(callback){
            callback(null, true);
        };
        
        exports.isEditor = function(callback){
            callback(null, true);
        };
        
        exports.getEntityNamesArray = R.curry(function(type, editableOnly, callback){
            function processNames(err, names){
                if(err) {Utils.handleError(err); return;}
                var newNames = [];
                names.forEach(function(name){
                    newNames.push({
                        displayName:name,
                        value:name,
                        editable: true
                    });
                });
                callback(null, newNames);
            }
            DBMS.getEntityNamesArray(type, processNames);
        });
        
        exports.isEntityEditable = function(type, entityName, callback) {
            callback(null, true);
        };
        
        exports.areAdaptationsEditable = function(adaptations, callback){
            var map = {};
            adaptations.forEach(function(elem){
                map[elem.storyName + "-" + elem.characterName] = true;
            });
            
            callback(null, map);
        };
    }

})(this['PermissionInformer']={}, MODE);
//# sourceMappingURL=data:application/json;base64,
